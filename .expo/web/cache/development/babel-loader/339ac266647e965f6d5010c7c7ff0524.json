{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport AddButton from \"../components/AddButton\";\nimport { storeMyStringStuff, getMyStringStuff, getMyObjectStuff, removeMyStuff, getAllKeys } from \"../database/CreateDatabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar passwordScreenCheck = function passwordScreenCheck(password, givenPassword) {\n  return _regeneratorRuntime.async(function passwordScreenCheck$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (password == givenPassword) {\n            {\n              Alert.alert(\"Richtig! Jetzt solltest du eigentlich weitergeleitet werden\");\n            }\n          } else {\n            {\n              Alert.alert(\"Passwort ungültig\");\n            }\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MonasPasswordCheck = function MonasPasswordCheck(props) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      givenPassword = _useState2[0],\n      setGivenPassword = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      oldPassword = _useState4[0],\n      setOldPassword = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      databaseNumber = _useState6[0],\n      setDatabaseNumber = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      text3 = _useState8[0],\n      setText3 = _useState8[1];\n\n  var getPWfromDBHandler = function getPWfromDBHandler() {\n    return _regeneratorRuntime.async(function getPWfromDBHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getMyStringStuff('@password').then(function (value) {\n              console.log(\"first\" + value);\n              setDatabaseNumber(value);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.imageBox,\n    children: [_jsxs(View, {\n      children: [_jsx(UILogo, {\n        src: \"gear\"\n      }), _jsx(View, {\n        style: styles.title,\n        children: _jsx(Text, {\n          style: styles.text2,\n          children: content.checkPasswordText\n        })\n      }), _jsx(Input, {\n        title: \"Passwort\"\n      }), _jsx(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \"Passwort\",\n        onChangeText: function onChangeText(text) {\n          return setGivenPassword(text);\n        },\n        defaultValue: text3\n      })]\n    }), _jsx(View, {\n      style: styles.textBox,\n      children: _jsx(Text, {\n        style: styles.text2,\n        children: databaseNumber\n      })\n    }), _jsx(View, {\n      style: styles.button,\n      children: _jsx(Pressable, {\n        style: styles.button1,\n        onPress: getPWfromDBHandler,\n        children: _jsx(Text, {\n          style: styles.text,\n          children: props.title\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\"\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\"\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  text2: {\n    color: colors.mainG,\n    fontSize: 20\n  },\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default MonasPasswordCheck;","map":{"version":3,"sources":["C:/Users/monav/Desktop/Uni/ProjektB/PeriodTracker/screens/MonasPasswordCheck.js"],"names":["React","useState","UILogo","colors","Input","content","AddButton","storeMyStringStuff","getMyStringStuff","getMyObjectStuff","removeMyStuff","getAllKeys","passwordScreenCheck","password","givenPassword","Alert","alert","MonasPasswordCheck","props","setGivenPassword","oldPassword","setOldPassword","databaseNumber","setDatabaseNumber","text3","setText3","getPWfromDBHandler","then","value","console","log","styles","imageBox","title","text2","checkPasswordText","height","text","textBox","button","button1","StyleSheet","create","flex","flexDirection","paddingHorizontal","paddingVertical","justifyContent","color","mainG","marginTop","fontSize","lineHeight","elevation","alignItems","mainLG","letterSpacing","borderRadius","width","backgroundColor","accBlue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Image,\r\n  Alert,\r\n  Pressable,\r\n  Text,\r\n  TextInput,\r\n} from \"react-native\";\r\nimport UILogo from \"../components/UILogo\";\r\nimport colors from \"../constants/colors\";\r\nimport Input from \"../components/Input\";\r\nimport * as content from \"../constants/texts\";\r\nimport AddButton from \"../components/AddButton\";\r\nimport {storeMyStringStuff, getMyStringStuff, getMyObjectStuff, removeMyStuff,getAllKeys} from \"../database/CreateDatabase\";\r\n\r\n\r\n/**\r\n *  ChoosePwScreen for Starters!\r\n *  takes the UILogo & Input Component.\r\n *\r\n *\r\n * ToDo: Navigation Bar\r\n * may find another solution for the marked Dates, it's just a dummy rn\r\n * also find a way to get the input outta it but that's prob. a diff issue\r\n *\r\n * @param {} props\r\n * @returns\r\n */\r\nconst passwordScreenCheck = async (password, givenPassword) => {\r\n  if (password == givenPassword) {\r\n    //Hier weiterleitung einfügen, ich hab doch keine Ahnung von Navigation help\r\n    {\r\n      Alert.alert(\r\n        \"Richtig! Jetzt solltest du eigentlich weitergeleitet werden\"\r\n      );\r\n    }\r\n  } else {\r\n    {\r\n      Alert.alert(\"Passwort ungültig\");\r\n    }\r\n  }\r\n};\r\n\r\nconst MonasPasswordCheck = (props) => {\r\n  //storeMyStuff(\"passwordKey\", 1234); //Das hier muss raus sobald es wirklich ein altes Passwort gibt\r\n\r\n  const [givenPassword, setGivenPassword] = useState();\r\n  const [oldPassword, setOldPassword] = useState();\r\n  \r\n  const [databaseNumber, setDatabaseNumber] = useState(\"\");\r\n\r\n  const [text3, setText3] = useState(\"\");\r\n\r\n  //getMyStuff(\"passwordKey\").then((returnedValue) => {\r\n    //setOldPassword(JSON.parse(returnedValue));\r\n  //});\r\n\r\n  const getPWfromDBHandler = async() => {\r\n    await getMyStringStuff('@password').then((value)=>{\r\n      console.log(\"first\"+value);\r\n      setDatabaseNumber(value);\r\n    });\r\n    \r\n   \r\n  };\r\n\r\n  return (\r\n    <View style={styles.imageBox}>\r\n      <View>\r\n        <UILogo src=\"gear\" />\r\n        <View style={styles.title}>\r\n          <Text style={styles.text2}>{content.checkPasswordText}</Text>\r\n        </View>\r\n        <Input title=\"Passwort\" />\r\n        <TextInput\r\n          style={{ height: 60 }}\r\n          placeholder=\"Passwort\"\r\n          onChangeText={(text) => setGivenPassword(text)}\r\n          defaultValue={text3}\r\n        />\r\n      </View>\r\n      <View style={styles.textBox}>\r\n             <Text style={styles.text2}>{databaseNumber}</Text>\r\n          </View>\r\n\r\n      <View style={styles.button}>\r\n        <Pressable\r\n          style={styles.button1}\r\n          onPress={getPWfromDBHandler}\r\n        >\r\n          <Text style={styles.text}>{props.title}</Text>\r\n        </Pressable>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n//quick reminder: Button gehört zum Navigation Component. Touchable Opacity wär noch cool.\r\n//https://www.skptricks.com/2018/11/react-native-responsive-image-scale-to-fit-example.html\r\n//Der button hat irgendwann seine default width vergessen wtf..\r\n\r\nconst styles = StyleSheet.create({\r\n  imageBox: {\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    paddingHorizontal: 60,\r\n    paddingVertical: 80,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  title: {\r\n    color: colors.mainG,\r\n    marginTop: 40,\r\n    fontSize: 32,\r\n    lineHeight: 36,\r\n  },\r\n  button: {\r\n    elevation: 5,\r\n    alignItems: \"center\",\r\n  },\r\n  text: {\r\n    color: colors.mainLG,\r\n    fontSize: 16,\r\n    lineHeight: 21,\r\n    letterSpacing: 0.25,\r\n  },\r\n\r\n  text2: {\r\n    color: colors.mainG,\r\n    fontSize: 20,\r\n  },\r\n\r\n  button1: {\r\n    borderRadius: 8,\r\n    height: 40,\r\n    width: 80,\r\n    elevation: 3,\r\n    backgroundColor: colors.accBlue,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n\r\nexport default MonasPasswordCheck;\r\n"]},"metadata":{},"sourceType":"module"}