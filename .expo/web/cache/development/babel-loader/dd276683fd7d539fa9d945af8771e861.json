{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport { getMyStuff } from \"../Database/CreateDatabase\";\nimport { storeMyStuff } from \"../Database/CreateDatabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar changePassword = function changePassword(oldPassword, givenOldPassword, newPassword1, newPassword2) {\n  return _regeneratorRuntime.async(function changePassword$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (newPassword1 == newPassword2) {\n            if (oldPassword == givenOldPassword) {\n              storeMyStuff('passwordKey', newPassword1);\n              {\n                Alert.alert(\"Passwort wurde aktualisiert\");\n              }\n            } else {\n              {\n                Alert.alert(\"Bitte überprüfe die alte Pin\");\n              }\n            }\n          } else {\n            {\n              Alert.alert(\"Neues Passwort und Wiederholung stimmen nicht überein\");\n            }\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar ChangePWScreen = function ChangePWScreen(props) {\n  storeMyStuff('passwordKey', 1234);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      oldPassword = _useState2[0],\n      setOldPassword = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      givenOldPassword = _useState4[0],\n      setGivenOldPassword = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newPassword1 = _useState6[0],\n      setNewPassword1 = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newPassword2 = _useState8[0],\n      setNewPassword2 = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      text = _useState10[0],\n      setText = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      text2 = _useState12[0],\n      setText2 = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      text3 = _useState14[0],\n      setText3 = _useState14[1];\n\n  getMyStuff('passwordKey').then(function (returnedValue) {\n    setOldPassword(JSON.parse(returnedValue));\n  });\n  return _jsxs(View, {\n    style: styles.imageBox,\n    children: [_jsxs(View, {\n      children: [_jsx(UILogo, {\n        src: \"lock\"\n      }), _jsx(View, {\n        style: styles.title,\n        children: _jsx(Text, {\n          style: styles.text2,\n          children: content.pin1\n        })\n      }), _jsx(Input, {\n        title: content.pin2\n      }), _jsx(Input, {\n        title: content.pin3\n      }), _jsx(Input, {\n        title: content.pin4\n      }), _jsx(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \"Probiers mal\",\n        onChangeText: function onChangeText(text) {\n          return setGivenOldPassword(text);\n        },\n        defaultValue: text\n      }), _jsx(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \"Neue Pin\",\n        onChangeText: function onChangeText(text) {\n          return setNewPassword1(text);\n        },\n        defaultValue: text2\n      }), _jsx(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \"Wiederholung\",\n        onChangeText: function onChangeText(text) {\n          return setNewPassword2(text);\n        },\n        defaultValue: text3\n      })]\n    }), _jsx(View, {\n      style: styles.button,\n      children: _jsx(Pressable, {\n        style: styles.button1,\n        onPress: function onPress() {\n          return changePassword(oldPassword, givenOldPassword, newPassword1, newPassword2);\n        },\n        children: _jsx(Text, {\n          style: styles.text,\n          children: props.title\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\"\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\"\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  text2: {\n    color: colors.mainG,\n    fontSize: 20\n  },\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default ChangePWScreen;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/screens/MonasChangePWScreen.js"],"names":["React","useState","UILogo","colors","Input","content","getMyStuff","storeMyStuff","changePassword","oldPassword","givenOldPassword","newPassword1","newPassword2","Alert","alert","ChangePWScreen","props","setOldPassword","setGivenOldPassword","setNewPassword1","setNewPassword2","text","setText","text2","setText2","text3","setText3","then","returnedValue","JSON","parse","styles","imageBox","title","pin1","pin2","pin3","pin4","height","button","button1","StyleSheet","create","flex","flexDirection","paddingHorizontal","paddingVertical","justifyContent","color","mainG","marginTop","fontSize","lineHeight","elevation","alignItems","mainLG","letterSpacing","borderRadius","width","backgroundColor","accBlue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Image, Alert, Pressable, Text , TextInput} from \"react-native\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport { getMyStuff } from \"../Database/CreateDatabase\";\nimport { storeMyStuff } from \"../Database/CreateDatabase\";\n\n/**\n *  ChangePWScreen!\n *  takes the UILogo & Input Component.\n *\n  *\n * @param {} props\n * @returns\n */\n\n//Überprüft die Übereinstimmung der neuen Passwörter, die eingegebene aktuelle Pin und speichert im Bestfall die neue Pin\n const changePassword=async(oldPassword, givenOldPassword,newPassword1, newPassword2)=>{\n\n    if(newPassword1==newPassword2){\n     \n       if(oldPassword==givenOldPassword){\n        storeMyStuff('passwordKey',newPassword1);\n        {Alert.alert(\"Passwort wurde aktualisiert\")}\n\n      }else{\n        {Alert.alert(\"Bitte überprüfe die alte Pin\")}\n      }\n    \n    }else{\n        {Alert.alert(\"Neues Passwort und Wiederholung stimmen nicht überein\")}\n    }\n}\n\n\n\nconst ChangePWScreen = (props) => {\n  storeMyStuff('passwordKey',1234);                 //Das hier muss raus sobald es wirklich ein altes Passwort gibt\n  const [oldPassword, setOldPassword]= useState();\n  const [givenOldPassword, setGivenOldPassword]= useState();\n  const [newPassword1, setNewPassword1]= useState();\n  const [newPassword2, setNewPassword2]= useState();\n  const [text, setText] = useState('');\n  const [text2, setText2] = useState('');\n  const [text3, setText3] = useState('');\n  \n  getMyStuff('passwordKey').then((returnedValue)=>{\n    setOldPassword(JSON.parse(returnedValue));\n  })\n  return (\n    <View style={styles.imageBox}>\n      <View>\n        <UILogo src=\"lock\" />\n        <View style={styles.title}>\n          <Text style={styles.text2}>{content.pin1}</Text>\n        </View>\n        <Input title={content.pin2} />\n        <Input title={content.pin3}/>\n        <Input title={content.pin4}/>\n        <TextInput\n          style={{height: 60}}\n          placeholder=\"Probiers mal\"\n          onChangeText={text => setGivenOldPassword(text)}\n          defaultValue={text}\n      />\n       <TextInput\n          style={{height: 60}}\n          placeholder=\"Neue Pin\"\n          onChangeText={text => setNewPassword1(text)}\n          defaultValue={text2}\n      />\n       <TextInput\n          style={{height: 60}}\n          placeholder=\"Wiederholung\"\n          onChangeText={text => setNewPassword2(text)}\n          defaultValue={text3}\n      />\n      </View>\n\n      <View style={styles.button}>\n        <Pressable\n          style={styles.button1}\n          onPress={() => changePassword(oldPassword,givenOldPassword, newPassword1, newPassword2)}\n        >\n          <Text style={styles.text}>{props.title}</Text>\n        </Pressable>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\",\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36,\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\",\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25,\n  },\n\n  text2: {\n    color: colors.mainG,\n    fontSize: 20,\n  },\n\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default ChangePWScreen;\n"]},"metadata":{},"sourceType":"module"}