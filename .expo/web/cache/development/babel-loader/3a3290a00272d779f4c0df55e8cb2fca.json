{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport AddButton from \"../components/AddButton\";\nimport { getMyStuff } from \"../Database/CreateDatabase\";\nimport { storeMyStuff } from \"../Database/CreateDatabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar passwordScreenCheck = function passwordScreenCheck(password, givenPassword) {\n  return _regeneratorRuntime.async(function passwordScreenCheck$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (password == givenPassword) {\n            {\n              Alert.alert(\"Richtig! Jetzt solltest du eigentlich weitergeleitet werden\");\n            }\n          } else {\n            {\n              Alert.alert(\"Passwort ungültig\");\n            }\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MonasPasswordCheck = function MonasPasswordCheck(props) {\n  storeMyStuff('passwordKey', 1234);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      givenPassword = _useState2[0],\n      setGivenPassword = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      oldPassword = _useState4[0],\n      setOldPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text3 = _useState6[0],\n      setText3 = _useState6[1];\n\n  getMyStuff('passwordKey').then(function (returnedValue) {\n    setOldPassword(JSON.parse(returnedValue));\n  });\n  return _jsxs(View, {\n    style: styles.imageBox,\n    children: [_jsxs(View, {\n      children: [_jsx(UILogo, {\n        src: \"gear\"\n      }), _jsx(View, {\n        style: styles.title,\n        children: _jsx(Text, {\n          style: styles.text2,\n          children: content.checkPasswordText\n        })\n      }), _jsx(Input, {\n        title: \"Passwort\"\n      }), _jsx(TextInput, {\n        style: {\n          height: 60\n        },\n        placeholder: \"Passwort\",\n        onChangeText: function onChangeText(text) {\n          return setGivenPassword(text);\n        },\n        defaultValue: text3\n      })]\n    }), _jsx(View, {\n      style: styles.button,\n      children: _jsx(Pressable, {\n        style: styles.button1,\n        onPress: function onPress() {\n          return passwordScreenCheck(oldPassword, givenPassword);\n        },\n        children: _jsx(Text, {\n          style: styles.text,\n          children: props.title\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\"\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\"\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  text2: {\n    color: colors.mainG,\n    fontSize: 20\n  },\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default MonasPasswordCheck;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/screens/MonasPasswordCheck.js"],"names":["React","useState","UILogo","colors","Input","content","AddButton","getMyStuff","storeMyStuff","passwordScreenCheck","password","givenPassword","Alert","alert","MonasPasswordCheck","props","setGivenPassword","oldPassword","setOldPassword","text3","setText3","then","returnedValue","JSON","parse","styles","imageBox","title","text2","checkPasswordText","height","text","button","button1","StyleSheet","create","flex","flexDirection","paddingHorizontal","paddingVertical","justifyContent","color","mainG","marginTop","fontSize","lineHeight","elevation","alignItems","mainLG","letterSpacing","borderRadius","width","backgroundColor","accBlue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Image, Alert, Pressable, Text, TextInput } from \"react-native\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport AddButton from \"../components/AddButton\";\nimport { getMyStuff } from \"../Database/CreateDatabase\";\nimport { storeMyStuff } from \"../Database/CreateDatabase\";\n\n\n/**\n *  ChoosePwScreen for Starters!\n *  takes the UILogo & Input Component.\n *\n *\n * ToDo: Navigation Bar\n * may find another solution for the marked Dates, it's just a dummy rn\n * also find a way to get the input outta it but that's prob. a diff issue\n *\n * @param {} props\n * @returns\n */\n const passwordScreenCheck=async(password , givenPassword)=>{\n  if(password==givenPassword){\n\n      //Hier weiterleitung einfügen, ich hab doch keine Ahnung von Navigation help\n      {Alert.alert(\"Richtig! Jetzt solltest du eigentlich weitergeleitet werden\")}\n  }else{\n      {Alert.alert(\"Passwort ungültig\")}\n  }\n}\n\nconst MonasPasswordCheck = (props) => {\n\n  storeMyStuff('passwordKey',1234);                 //Das hier muss raus sobald es wirklich ein altes Passwort gibt\n  \n  const [givenPassword, setGivenPassword]= useState();\n  const [oldPassword, setOldPassword]= useState();\n \n  const [text3, setText3] = useState('');\n  \n  getMyStuff('passwordKey').then((returnedValue)=>{\n    setOldPassword(JSON.parse(returnedValue));\n  })\n  return (\n    <View style={styles.imageBox}>\n      <View>\n        <UILogo src=\"gear\" />\n        <View style={styles.title}>\n          <Text style={styles.text2}>{content.checkPasswordText}</Text>\n        </View>\n        <Input title=\"Passwort\" />\n        <TextInput\n          style={{height: 60}}\n          placeholder=\"Passwort\"\n          onChangeText={text => setGivenPassword(text)}\n          defaultValue={text3}\n      />\n   \n      </View>\n\n      <View style={styles.button}>\n        <Pressable\n          style={styles.button1}\n          onPress={() => passwordScreenCheck(oldPassword, givenPassword)}\n        >\n          <Text style={styles.text}>{props.title}</Text>\n        </Pressable>\n      </View>\n    </View>\n  );\n};\n//quick reminder: Button gehört zum Navigation Component. Touchable Opacity wär noch cool.\n//https://www.skptricks.com/2018/11/react-native-responsive-image-scale-to-fit-example.html\n//Der button hat irgendwann seine default width vergessen wtf..\n\nconst styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\",\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36,\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\",\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25,\n  },\n\n  text2: {\n    color: colors.mainG,\n    fontSize: 20,\n  },\n\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default MonasPasswordCheck;\n"]},"metadata":{},"sourceType":"module"}