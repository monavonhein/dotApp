{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport XDate from 'xdate';\nimport { sameMonth, isToday, isPastDate } from \"../../dateutils\";\nimport { xdateToData, toMarkingFormat } from \"../../interface\";\nimport { getDefaultLocale } from \"../../services\";\n\nvar commons = require(\"../commons\");\n\nvar TOP_POSITION = 65;\n\nvar Presenter = _createClass(function Presenter() {\n  var _this = this;\n\n  _classCallCheck(this, Presenter);\n\n  this._getIconDown = function () {\n    return require(\"../../img/down.png\");\n  };\n\n  this._getIconUp = function () {\n    return require(\"../../img/up.png\");\n  };\n\n  this.getButtonIcon = function (date) {\n    var showTodayButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!showTodayButton) {\n      return undefined;\n    }\n\n    var icon = isPastDate(date) ? _this._getIconDown() : _this._getIconUp();\n    return icon;\n  };\n\n  this.setDate = function (props, date, newDate, updateState, updateSource) {\n    var buttonIcon = _this.getButtonIcon(date, props.showTodayButton);\n\n    updateState(buttonIcon);\n    props.onDateChanged == null ? void 0 : props.onDateChanged(date, updateSource);\n\n    if (!sameMonth(new XDate(date), new XDate(newDate))) {\n      props.onMonthChange == null ? void 0 : props.onMonthChange(xdateToData(new XDate(date)), updateSource);\n    }\n  };\n\n  this.setDisabled = function (showTodayButton, newDisabledValue, oldDisabledValue, updateState) {\n    if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n      return;\n    }\n\n    updateState(newDisabledValue);\n  };\n\n  this.shouldAnimateTodayButton = function (props) {\n    return props.showTodayButton;\n  };\n\n  this.getTodayDate = function () {\n    return toMarkingFormat(new XDate());\n  };\n\n  this.getPositionAnimation = function (date) {\n    var todayBottomMargin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var toValue = isToday(new XDate(date)) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n    return {\n      toValue: toValue,\n      tension: 30,\n      friction: 8,\n      useNativeDriver: true\n    };\n  };\n\n  this.shouldAnimateOpacity = function (props) {\n    return props.disabledOpacity;\n  };\n\n  this.getOpacityAnimation = function (_ref, disabled) {\n    var _ref$disabledOpacity = _ref.disabledOpacity,\n        disabledOpacity = _ref$disabledOpacity === void 0 ? 0 : _ref$disabledOpacity;\n    return {\n      toValue: disabled ? disabledOpacity : 1,\n      duration: 500,\n      useNativeDriver: true\n    };\n  };\n\n  this.getTodayFormatted = function () {\n    var todayString = getDefaultLocale().today || commons.todayString;\n    var today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n    return today;\n  };\n});\n\nexport default Presenter;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/node_modules/react-native-calendars/src/expandableCalendar/Context/Presenter.js"],"names":["XDate","sameMonth","isToday","isPastDate","xdateToData","toMarkingFormat","getDefaultLocale","commons","require","TOP_POSITION","Presenter","_getIconDown","_getIconUp","getButtonIcon","date","showTodayButton","undefined","icon","setDate","props","newDate","updateState","updateSource","buttonIcon","onDateChanged","onMonthChange","setDisabled","newDisabledValue","oldDisabledValue","shouldAnimateTodayButton","getTodayDate","getPositionAnimation","todayBottomMargin","toValue","tension","friction","useNativeDriver","shouldAnimateOpacity","disabledOpacity","getOpacityAnimation","disabled","duration","getTodayFormatted","todayString","today","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import XDate from 'xdate';\nimport { sameMonth, isToday, isPastDate } from '../../dateutils';\nimport { xdateToData, toMarkingFormat } from '../../interface';\nimport { getDefaultLocale } from '../../services';\nconst commons = require('../commons');\nconst TOP_POSITION = 65;\nclass Presenter {\n    _getIconDown = () => {\n        return require('../../img/down.png');\n    };\n    _getIconUp = () => {\n        return require('../../img/up.png');\n    };\n    getButtonIcon = (date, showTodayButton = true) => {\n        if (!showTodayButton) {\n            return undefined;\n        }\n        const icon = isPastDate(date) ? this._getIconDown() : this._getIconUp();\n        return icon;\n    };\n    setDate = (props, date, newDate, updateState, updateSource) => {\n        const buttonIcon = this.getButtonIcon(date, props.showTodayButton);\n        updateState(buttonIcon);\n        props.onDateChanged?.(date, updateSource);\n        if (!sameMonth(new XDate(date), new XDate(newDate))) {\n            props.onMonthChange?.(xdateToData(new XDate(date)), updateSource);\n        }\n    };\n    setDisabled = (showTodayButton, newDisabledValue, oldDisabledValue, updateState) => {\n        if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n            return;\n        }\n        updateState(newDisabledValue);\n    };\n    shouldAnimateTodayButton = (props) => {\n        return props.showTodayButton;\n    };\n    getTodayDate = () => {\n        return toMarkingFormat(new XDate());\n    };\n    getPositionAnimation = (date, todayBottomMargin = 0) => {\n        const toValue = isToday(new XDate(date)) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n        return {\n            toValue,\n            tension: 30,\n            friction: 8,\n            useNativeDriver: true\n        };\n    };\n    shouldAnimateOpacity = (props) => {\n        return props.disabledOpacity;\n    };\n    getOpacityAnimation = ({ disabledOpacity = 0 }, disabled) => {\n        return {\n            toValue: disabled ? disabledOpacity : 1,\n            duration: 500,\n            useNativeDriver: true\n        };\n    };\n    getTodayFormatted = () => {\n        const todayString = getDefaultLocale().today || commons.todayString;\n        const today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n        return today;\n    };\n}\nexport default Presenter;\n"]},"metadata":{},"sourceType":"module"}