{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport AddButton from \"../components/AddButton\";\nimport storeMyStuff from \"../Database/CreateDatabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar checkPasswords = function checkPasswords(firstPassword1, secondPassword1) {\n  return _regeneratorRuntime.async(function checkPasswords$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (firstPassword1 == secondPassword1) {\n            {\n              Alert.alert(\"Vielen Dank! Dein Passwort wurde gespeichert \");\n            }\n            storeMyStuff('passwordKey', firstPassword1);\n          } else {\n            {\n              Alert.alert(\"Passwörter sind nicht gleich\");\n            }\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar MonasChoosePwScreen = function MonasChoosePwScreen(props) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      firstPassword1 = _useState2[0],\n      setFirstPassword1 = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      secondPassword1 = _useState4[0],\n      setSecondPassword1 = _useState4[1];\n\n  return _jsxs(View, {\n    style: styles.imageBox,\n    children: [_jsxs(View, {\n      children: [_jsx(UILogo, {\n        src: \"gear\"\n      }), _jsx(View, {\n        style: styles.title,\n        children: _jsx(Text, {\n          style: styles.text2,\n          children: content.start7\n        })\n      }), _jsx(Input, {\n        title: \"Passwort\",\n        value: firstPassword1\n      }), _jsx(Input, {\n        title: \"Wiederholen\",\n        value: secondPassword1\n      })]\n    }), _jsx(View, {\n      style: styles.button,\n      children: _jsx(Pressable, {\n        style: styles.button1,\n        onPress: function onPress() {\n          return checkPasswords(firstPassword1, secondPassword1);\n        },\n        children: _jsx(Text, {\n          style: styles.text,\n          children: props.title\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\"\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\"\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  text2: {\n    color: colors.mainG,\n    fontSize: 20\n  },\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default MonasChoosePwScreen;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/screens/MonasChoosePWScreen.js"],"names":["React","useState","UILogo","colors","Input","content","AddButton","storeMyStuff","checkPasswords","firstPassword1","secondPassword1","Alert","alert","MonasChoosePwScreen","props","setFirstPassword1","setSecondPassword1","styles","imageBox","title","text2","start7","button","button1","text","StyleSheet","create","flex","flexDirection","paddingHorizontal","paddingVertical","justifyContent","color","mainG","marginTop","fontSize","lineHeight","elevation","alignItems","mainLG","letterSpacing","borderRadius","height","width","backgroundColor","accBlue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Image, Alert, Pressable, Text, TextInput } from \"react-native\";\nimport UILogo from \"../components/UILogo\";\nimport colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport * as content from \"../constants/texts\";\nimport AddButton from \"../components/AddButton\";\nimport storeMyStuff from \"../Database/CreateDatabase\";\n\n/**\n *  ChoosePwScreen for Starters!\n *  takes the UILogo & Input Component.\n *\n *\n * ToDo: Navigation Bar\n * may find another solution for the marked Dates, it's just a dummy rn\n * also find a way to get the input outta it but that's prob. a diff issue\n *\n * @param {} props\n * @returns\n */\n\n//Das hier checkt erst, ob die Passwörter gleich sind, und speichert dann mit der storeMyStuff aus CreateDatabase das Passwort unter dem Key \"passwordKey\"\nconst checkPasswords=async(firstPassword1, secondPassword1)=>{\n    if(firstPassword1==secondPassword1){\n        {Alert.alert(\"Vielen Dank! Dein Passwort wurde gespeichert \")}\n        storeMyStuff('passwordKey',firstPassword1);\n    }else{\n        {Alert.alert(\"Passwörter sind nicht gleich\")}\n    }\n}\n\n\nconst MonasChoosePwScreen = (props) => {\n\nconst [firstPassword1, setFirstPassword1]=useState(0);\nconst [secondPassword1, setSecondPassword1]=useState(0);\n  return (\n    <View style={styles.imageBox}>\n      <View>\n        <UILogo src=\"gear\" />\n        <View style={styles.title}>\n          <Text style={styles.text2}>{content.start7}</Text>\n        </View>\n        <Input title=\"Passwort\" value={firstPassword1}/>\n        <Input title=\"Wiederholen\" value={secondPassword1}/>\n      \n      </View>\n\n      <View style={styles.button}>\n        <Pressable\n          style={styles.button1}\n          onPress={()=>checkPasswords(firstPassword1, secondPassword1)}>\n          <Text style={styles.text}>{props.title}</Text>\n        </Pressable>\n      </View>\n    </View>\n  );\n};\n//quick reminder: Button gehört zum Navigation Component. Touchable Opacity wär noch cool.\n//https://www.skptricks.com/2018/11/react-native-responsive-image-scale-to-fit-example.html\n//Der button hat irgendwann seine default width vergessen wtf..\n\nconst styles = StyleSheet.create({\n  imageBox: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: 60,\n    paddingVertical: 80,\n    justifyContent: \"space-between\",\n  },\n  title: {\n    color: colors.mainG,\n    marginTop: 40,\n    fontSize: 32,\n    lineHeight: 36,\n  },\n  button: {\n    elevation: 5,\n    alignItems: \"center\",\n  },\n  text: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25,\n  },\n\n  text2: {\n    color: colors.mainG,\n    fontSize: 20,\n  },\n\n  button1: {\n    borderRadius: 8,\n    height: 40,\n    width: 80,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default MonasChoosePwScreen;\n"]},"metadata":{},"sourceType":"module"}