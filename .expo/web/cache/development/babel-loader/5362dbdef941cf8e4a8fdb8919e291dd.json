{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Input from \"../components/Input\";\nimport colors from \"../constants/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginPWScreen = function LoginPWScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedNumber = _useState4[0],\n      setSelectedNumber = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmed = _useState6[0],\n      setConfirmed = _useState6[1];\n\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue(\"\");\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenPin = parseInt(enteredValue);\n\n    if (isNaN(chosenPin)) {\n      console.log(\"Fuck you\");\n      resetInputHandler;\n      return;\n    }\n\n    setConfirmed(true);\n    setSelectedNumber(chosenPin);\n    setEnteredValue(\"\");\n    Keyboard.dismiss();\n  };\n\n  if (confirmed) {\n    console.log(selectedNumber + \".. here ye go\");\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Image, {\n        style: styles.logo,\n        source: require(\"../assets/bubble.jpg\")\n      }), _jsx(View, {\n        style: styles.inputBox,\n        children: _jsx(Input, {\n          title: \"Passwort\",\n          blurOnSubmit: true,\n          onChangeText: numberInputHandler,\n          value: enteredValue\n        })\n      }), _jsx(View, {\n        style: styles.buttonBox,\n        children: _jsx(Pressable, {\n          style: styles.buttonDesign,\n          onPress: confirmInputHandler,\n          children: _jsx(Text, {\n            style: styles.textButton,\n            children: props.title\n          })\n        })\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: \"50%\"\n  },\n  logo: {\n    width: 300,\n    height: 200\n  },\n  inputBox: {},\n  buttonBox: {\n    margin: 50,\n    elevation: 5\n  },\n  textButton: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  buttonDesign: {\n    borderRadius: 8,\n    height: 40,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default LoginPWScreen;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/screens/LoginPWScreen.js"],"names":["React","useState","Input","colors","LoginPWScreen","props","enteredValue","setEnteredValue","selectedNumber","setSelectedNumber","confirmed","setConfirmed","numberInputHandler","inputText","replace","resetInputHandler","confirmInputHandler","chosenPin","parseInt","isNaN","console","log","Keyboard","dismiss","styles","container","logo","require","inputBox","buttonBox","buttonDesign","textButton","title","StyleSheet","create","height","width","margin","elevation","color","mainLG","fontSize","lineHeight","letterSpacing","borderRadius","backgroundColor","accBlue","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Image,\n  Keyboard,\n  Alert,\n  TouchableWithoutFeedback,\n  Pressable,\n  Text,\n} from \"react-native\";\nimport Input from \"../components/Input\";\nimport colors from \"../constants/colors\";\n/**\n * The Screen we forgot about.\n * Login PW Screen\n *\n * takes the Image Source of our Logo and asks the password\n *\n * ToDo: Navigation and create a Logo. The Image is a dummy rn.\n * Also takes in the Password, so it's safe to unlock :)\n * needs to add logic: Like failed PW\n *\n * @param {*} props\n * @returns\n */\nconst LoginPWScreen = (props) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [selectedNumber, setSelectedNumber] = useState();\n  const [confirmed, setConfirmed] = useState(false);\n\n  //validates Numbers only\n  const numberInputHandler = (inputText) => {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  //resets the Input in case nothing of worth was given\n  const resetInputHandler = () => {\n    setEnteredValue(\"\");\n    setConfirmed(false);\n  };\n\n  //confirms that a number was entered, else it throws an insult\n  const confirmInputHandler = () => {\n    const chosenPin = parseInt(enteredValue);\n    if (isNaN(chosenPin)) {\n      console.log(\"Fuck you\");\n      resetInputHandler;\n\n      return;\n    }\n    setConfirmed(true);\n    setSelectedNumber(chosenPin);\n    setEnteredValue(\"\");\n    Keyboard.dismiss();\n  };\n\n  //if pressed and confirmed selectedNumber holds the PIN\n  if (confirmed) {\n    console.log(selectedNumber + \".. here ye go\");\n  }\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={() => {\n        Keyboard.dismiss();\n      }}\n    >\n      <View style={styles.container}>\n        <Image style={styles.logo} source={require(\"../assets/bubble.jpg\")} />\n\n        <View style={styles.inputBox}>\n          <Input\n            title=\"Passwort\"\n            blurOnSubmit\n            onChangeText={numberInputHandler}\n            value={enteredValue}\n          />\n        </View>\n        <View style={styles.buttonBox}>\n          <Pressable style={styles.buttonDesign} onPress={confirmInputHandler}>\n            <Text style={styles.textButton}>{props.title}</Text>\n          </Pressable>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"50%\",\n  },\n  logo: {\n    width: 300,\n    height: 200,\n  },\n  inputBox: {},\n  //Button Styles\n  buttonBox: {\n    margin: 50,\n    elevation: 5,\n  },\n\n  textButton: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25,\n  },\n\n  buttonDesign: {\n    borderRadius: 8,\n    height: 40,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default LoginPWScreen;\n"]},"metadata":{},"sourceType":"module"}