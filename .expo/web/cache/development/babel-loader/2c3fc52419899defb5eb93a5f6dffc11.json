{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Input from \"../components/Input\";\nimport colors from \"../constants/colors\";\nimport { storeMyStringStuff, getMyStringStuff, getMyObjectStuff, removeMyStuff, getAllKeys } from \"../database/CreateDatabase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginPWScreen = function LoginPWScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedNumber = _useState4[0],\n      setSelectedNumber = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      databaseNumber = _useState6[0],\n      setDatabaseNumber = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmed = _useState8[0],\n      setConfirmed = _useState8[1];\n\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue(\"\");\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenPin;\n    return _regeneratorRuntime.async(function confirmInputHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chosenPin = parseInt(enteredValue);\n\n            if (isNaN(chosenPin)) {\n              Alert.alert(\"Das Passwort muss mindestens eine Ziffer enthalten\");\n              resetInputHandler;\n            } else {\n              setConfirmed(true);\n              setSelectedNumber(chosenPin);\n              storeMyStringStuff('@password', JSON.stringify(chosenPin));\n              setEnteredValue(\"\");\n              Keyboard.dismiss();\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getPWfromDBHandler = function getPWfromDBHandler() {\n    return _regeneratorRuntime.async(function getPWfromDBHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getMyStringStuff('@password').then(function (value) {\n              console.log(\"first\" + value);\n              setDatabaseNumber(value);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (confirmed) {\n    console.log(selectedNumber + \".. here ye go\");\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Image, {\n        style: styles.logo,\n        source: require(\"../assets/bubble.jpg\")\n      }), _jsx(View, {\n        style: styles.inputBox,\n        children: _jsx(Input, {\n          title: \"Passwort\",\n          blurOnSubmit: true,\n          onChangeText: numberInputHandler,\n          value: enteredValue\n        })\n      }), _jsxs(View, {\n        style: styles.buttonBox,\n        children: [_jsx(Pressable, {\n          style: styles.buttonDesign,\n          onPress: confirmInputHandler,\n          children: _jsx(Text, {\n            style: styles.textButton,\n            children: \"Passwort speichern\"\n          })\n        }), _jsx(Pressable, {\n          style: styles.buttonDesign,\n          onPress: getPWfromDBHandler,\n          children: _jsx(Text, {\n            style: styles.textButton,\n            children: \"Gespeichertes Aufrufen\"\n          })\n        }), _jsx(View, {\n          style: styles.textBox,\n          children: _jsx(Text, {\n            style: styles.text2,\n            children: databaseNumber\n          })\n        })]\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: \"50%\"\n  },\n  logo: {\n    width: 300,\n    height: 200\n  },\n  inputBox: {},\n  buttonBox: {\n    margin: 50,\n    elevation: 5\n  },\n  textButton: {\n    color: colors.mainLG,\n    fontSize: 16,\n    lineHeight: 21,\n    letterSpacing: 0.25\n  },\n  buttonDesign: {\n    borderRadius: 8,\n    height: 40,\n    elevation: 3,\n    backgroundColor: colors.accBlue,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default LoginPWScreen;","map":{"version":3,"sources":["C:/Users/monav/Desktop/Uni/ProjektB/PeriodTracker/screens/LoginPWScreen.js"],"names":["React","useState","Input","colors","storeMyStringStuff","getMyStringStuff","getMyObjectStuff","removeMyStuff","getAllKeys","LoginPWScreen","props","enteredValue","setEnteredValue","selectedNumber","setSelectedNumber","databaseNumber","setDatabaseNumber","confirmed","setConfirmed","numberInputHandler","inputText","replace","resetInputHandler","confirmInputHandler","chosenPin","parseInt","isNaN","Alert","alert","JSON","stringify","Keyboard","dismiss","getPWfromDBHandler","then","value","console","log","styles","container","logo","require","inputBox","buttonBox","buttonDesign","textButton","textBox","text2","StyleSheet","create","height","width","margin","elevation","color","mainLG","fontSize","lineHeight","letterSpacing","borderRadius","backgroundColor","accBlue","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Image,\r\n  Keyboard,\r\n  Alert,\r\n  TouchableWithoutFeedback,\r\n  Pressable,\r\n  Text,\r\n} from \"react-native\";\r\nimport Input from \"../components/Input\";\r\nimport colors from \"../constants/colors\";\r\nimport {storeMyStringStuff, getMyStringStuff, getMyObjectStuff, removeMyStuff,getAllKeys} from \"../database/CreateDatabase\";\r\n/**\r\n * The Screen we forgot about.\r\n * Login PW Screen\r\n *\r\n * takes the Image Source of our Logo and asks the password\r\n *\r\n * ToDo: Navigation and create a Logo. The Image is a dummy rn.\r\n * Also takes in the Password, so it's safe to unlock :)\r\n * needs to add logic: Like failed PW\r\n *\r\n * @param {*} props\r\n * @returns\r\n */\r\nconst LoginPWScreen = (props) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [selectedNumber, setSelectedNumber] = useState();\r\n  const [databaseNumber, setDatabaseNumber] = useState(\"\");\r\n  const [confirmed, setConfirmed] = useState(false);\r\n\r\n  //validates Numbers only\r\n  const numberInputHandler = (inputText) => {\r\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\r\n  };\r\n\r\n  //resets the Input in case nothing of worth was given\r\n  const resetInputHandler = () => {\r\n    setEnteredValue(\"\");\r\n    setConfirmed(false);\r\n  };\r\n\r\n  //confirms that a number was entered, else it throws an insult\r\n  const confirmInputHandler = async() => {\r\n    const chosenPin = parseInt(enteredValue);\r\n    if (isNaN(chosenPin)) {\r\n      Alert.alert(\"Das Passwort muss mindestens eine Ziffer enthalten\");\r\n      resetInputHandler;\r\n      \r\n\r\n    }else{\r\n      setConfirmed(true);\r\n      setSelectedNumber(chosenPin);\r\n      storeMyStringStuff('@password',JSON.stringify(chosenPin));\r\n      setEnteredValue(\"\");\r\n      Keyboard.dismiss(); \r\n    }\r\n  };\r\n\r\n  //Shit to prove the database works\r\n  const getPWfromDBHandler = async() => {\r\n    await getMyStringStuff('@password').then((value)=>{\r\n      console.log(\"first\"+value);\r\n      setDatabaseNumber(value);\r\n    });\r\n    \r\n   \r\n  };\r\n\r\n  \r\n  //if pressed and confirmed selectedNumber holds the PIN\r\n  if (confirmed) {\r\n    console.log(selectedNumber + \".. here ye go\");\r\n  }\r\n\r\n  return (\r\n    <TouchableWithoutFeedback\r\n      onPress={() => {\r\n        Keyboard.dismiss();\r\n      }}\r\n    >\r\n      <View style={styles.container}>\r\n        <Image style={styles.logo} source={require(\"../assets/bubble.jpg\")} />\r\n\r\n        <View style={styles.inputBox}>\r\n          <Input\r\n            title=\"Passwort\"\r\n            blurOnSubmit\r\n            onChangeText={numberInputHandler}\r\n            value={enteredValue}\r\n          />\r\n        </View>\r\n        <View style={styles.buttonBox}>\r\n          <Pressable style={styles.buttonDesign} onPress={confirmInputHandler}>\r\n            <Text style={styles.textButton}>{\"Passwort speichern\"}</Text>\r\n          </Pressable>\r\n          <Pressable style={styles.buttonDesign} onPress={getPWfromDBHandler}>\r\n            <Text style={styles.textButton}>{\"Gespeichertes Aufrufen\"}</Text>\r\n          </Pressable>\r\n          <View style={styles.textBox}>\r\n             <Text style={styles.text2}>{databaseNumber}</Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    height: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 300,\r\n    height: 200,\r\n  },\r\n  inputBox: {},\r\n  //Button Styles\r\n  buttonBox: {\r\n    margin: 50,\r\n    elevation: 5,\r\n  },\r\n\r\n  textButton: {\r\n    color: colors.mainLG,\r\n    fontSize: 16,\r\n    lineHeight: 21,\r\n    letterSpacing: 0.25,\r\n  },\r\n\r\n  buttonDesign: {\r\n    borderRadius: 8,\r\n    height: 40,\r\n    elevation: 3,\r\n    backgroundColor: colors.accBlue,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n\r\nexport default LoginPWScreen;\r\n"]},"metadata":{},"sourceType":"module"}